# yaml-language-server: $schema=https://taskfile.dev/schema.json

version: "3"

interval: "50ms"

vars:
  PACKAGES:
    [
      "packages/a11y",
      "packages/components",
      "packages/elements",
      "packages/scroll-lock",
      "packages/icons",
      "packages/svg-sprites",
    ]

includes:
  docs:
    taskfile: docs/Taskfile.yml
    dir: docs

tasks:
  default:
    desc: List available tasks
    silent: true
    cmds:
      - task -l --sort none

  setup:
    desc: Install tools and dependencies
    run: when_changed
    sources:
      - .mise.toml
      - "package.json"
      - "**/package.json"
    cmds:
      - bun install

  build:
    desc: Build all packages
    deps: [setup]
    cmds:
      - bun x turbo build --filter "./packages/**"

  # experimental bundle task using bun
  bundle:
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      ENTRY:
        sh: cat package.json | jq -jr '.tsup.entry[] | " ",.'
      FORMAT:
        sh: cat package.json | jq -jr '.tsup.format[] | " ",.'
      EXTERNAL:
        sh: cat package.json | jq -jr '.tsup.external[] | " -e ",.'
    cmd: bun build --target=browser {{.ENTRY}} --outdir dist --sourcemap=external --format {{.FORMAT}} {{.EXTERNAL}} {{.CLI_ARGS}}

  dev:
    desc: Start packages in dev mode
    deps: [setup]
    watch: true
    sources:
      - "packages/elements/**/*.{ts,tsx}"
    cmds:
      - bun x turbo build

  build:watch:
    desc: Watch-build packages for development
    deps: [setup]
    cmds:
      - bun x turbo watch build --filter "./packages/**"

  test:
    desc: "Run tests on all packages (Run specific test: t test -- -t prettier)"
    deps: [build]
    cmds:
      - bun x turbo test -- {{.CLI_ARGS}}

  a11y:
    desc: "Run a11y tests"
    dir: "docs"
    deps: [setup]
    cmds:
      - 'npx @sv/a11y ./a11y.json "task preview"'

  test:watch:
    desc: "Run tests on current packages (Run specific test: t test --  -t prettier)"
    dir: "{{.USER_WORKING_DIR}}"
    cmds:
      - bun test --watch -t {{.CLI_ARGS}}

  check:
    desc: Run checks on all packages
    deps: [setup]
    cmds:
      - bun x turbo check
      - bun x biome check --diagnostic-level=error .

  check:fix:
    desc: Apply all (unsafe) autofixes
    cmds:
      - bun x biome check --write .

  check:fix:unsafe:
    desc: Apply all (unsafe) autofixes
    cmds:
      - bun x biome check --write --unsafe .

  clean:
    desc: Clean untracked files
    cmds:
      - git clean -xdf
      - git tag -d $(git tag -l)

  version:
    silent: true
    desc: Create a package version
    cmds:
      - knope document-change
      - git add --all

  release:
    deps: [build]
    env:
      RELEASE_LABEL: "latest"
    cmds:
      - git config user.email "gitlab@s-v.de"
      - git config user.name "CI"
      - git fetch --prune --prune-tags -f
      - knope -v release | tee .task/publish.txt
      - task notify || true

  release:preview:
    cmds:
      - knope release --dry-run

  prerelease:
    deps: [build]
    env:
      RELEASE_LABEL: "dev"
    cmds:
      - "echo Prerelease tag: $RELEASE_LABEL"
      - knope -v release --prerelease-label=$RELEASE_LABEL

  publish-packages:
    cmds:
      - "echo Packages release tag: $RELEASE_LABEL"
      - for: { var: PACKAGES }
        cmd: cd {{.ITEM}} && task publish

  publish:
    dir: "{{.USER_WORKING_DIR}}"
    vars:
      NAME:
        sh: bun x npm version --json | jq "keys[0]"
      VERSION:
        sh: bun x npm version --json | jq ".[keys[0]]"
    cmds:
      - "echo Publish tag: $RELEASE_LABEL"
      - bun x npm publish --access public --tag $RELEASE_LABEL && echo info Publishing \"{{.NAME}}\" at \"{{.VERSION}}\" || true

  notify:
    silent: true
    dir: "./"
    cmds:
      - bun ./scripts/generate-notify > .task/notify.txt
      - defer: rm .task/notify.txt
      - 'echo "$(cat .task/notify.txt)"'
      - 'curl -X POST -d "$(cat .task/notify.txt)" $SLACK_WEBHOOK_URL'

  docker:build:
    desc: Build docker image, pass --push to push to registry
    cmds:
      - docker buildx build --platform linux/amd64,linux/arm64 -f .docker/Dockerfile --tag luckydye/atrium:latest . {{.CLI_ARGS}}
