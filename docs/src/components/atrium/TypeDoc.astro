---
import path from "node:path";
import { Code } from "@astrojs/starlight/components";
import { Markdown } from "astro/components";
import {
  Application,
  type DeclarationReflection,
  type ProjectReflection,
  type Reflection,
  ReflectionKind,
  ReflectionFlag,
} from "typedoc";
import { remark } from "remark";
import remarkHtml from "remark-html";
import { codeToHtml } from "shiki";

export interface Props {
  source: string;
  symbol: string;
}

const props = Astro.props;

function sourceToUrl(path: string, source) {
  return `https://gitlab.s-v.de/svp/atrium/-/blob/main/rec/${path}/${source.fileName}#L${source.line}`;
}

async function parse(options: { pkg: string; entry: string; config?: string }) {
  const base = path.resolve(options.pkg);
  const app = await Application.bootstrap({
    basePath: base,
    exclude: ["**/node_modules/**"],
    includes: `${base}/src/*`,
    entryPoints: [`${base}${options.entry}`],
    tsconfig: options.config ? `${base}${options.config}` : `${base}/tsconfig.json`,
    validation: false,
    cacheBust: false,
    emit: "none",
    blockTags: ["@customEvent"],
  });

  return await app.convert();
}

function declaration(obj: ProjectReflection, name) {
  return obj.getChildByName(name);
}

function childrenWithComments(
  obj?: Reflection | undefined,
): DeclarationReflection[] | undefined {
  // @ts-ignore
  return obj?.children?.filter((c) => c.comment);
}

async function toHtml(content: any[] | undefined) {
  let html = "";

  if (content)
    for (const item of content) {
      switch (item.kind) {
        case "text": {
          html += remark().use(remarkHtml).processSync(item.text);
          break;
        }
        case "code": {
          const lines = item.text.split("\n");
          const code = lines.slice(1, lines.length - 1).join("\n");

          html += await codeToHtml(code, {
            lang: "tsx",
            theme: "dark-plus",
          });
          break;
        }
      }
    }

  return html;
}

async function Summary({ doc, symbol }) {
  const obj = declaration(doc, symbol)?.comment;
  return await toHtml(obj?.summary);
}

async function Attributes({ doc, symbol }) {
  const fields = childrenWithComments(declaration(doc, symbol));

  if (!fields || fields.length === 0) {
    return;
  }

  return Promise.all([
    `<tr>
      <th>Name</th>
      <th>Type</th>
      <th>Default value</th>
      <th>Description</th>
    </tr>`,
    ...fields
      .filter((field) => !["styles", "properties"].includes(field.name))
      .map(async (field) => {
        const html = `
        <tr class="pt-2">
          <td style="min-width: 120px;">
            <code>${field.name}</code>
          </td>
          <td>
            ${field.type}
          </td>
          <td>
            ${field.defaultValue}
          </td>
          <td>
            ${await toHtml(field.comment?.summary)}
          </td>
        </tr>
      `;
        return html;
      }),
  ]);
}

function Events({ doc, symbol }) {
  const track = declaration(doc, symbol);
  const events = track?.comment?.blockTags.filter((tag) => tag.tag === "@customEvent");

  if (!events || events.length === 0) {
    return;
  }

  return [
    `<tr>
      <th>Name</th>
      <th>Description</th>
    </tr>`,
    ...events.map((event) => {
      const text = event.content[0]?.text?.split(" - ");
      if (text) {
        return `
          <tr>
            <td>
              <code>${text[0]}</code>
            </td>
            <td>
              ${remark().use(remarkHtml).processSync(text[1])}
            </td>
          </tr>
        `;
      }
    }),
  ];
}

async function Methods({ doc, symbol }: { doc: ProjectReflection; symbol: string }) {
  const dec = doc.getChildByName(symbol) as DeclarationReflection;
  const methods = dec.groups
    ?.find((g) => g.title === "Methods")
    ?.children.filter((child) => child.flags.hasFlag(ReflectionFlag.Public))
    .filter(
      (field) => !["connectedCallback", "disconnectedCallback"].includes(field.name),
    )
    .map((method) => {
      return method.signatures?.[0];
    });

  if (!methods || methods.length === 0) {
    return;
  }

  return methods.map(async (child) => {
    if (child) {
      const source = child?.sources?.[0];
      return `
          <div class="not-content grid grid-cols-[1fr_auto]">
            <h4>
              <code class="text-lg">${symbol}.${child.name}(${child.parameters
                ?.map((param) => {
                  return `${param.name}: ${param.type}`;
                })
                .join(", ")})</code>
            </h4>
            <a target="_blank" href="${sourceToUrl(props.source, source)}" class="text-xs opacity-50">
              ${source?.fileName}:${source?.line}
            </a>
            <div class="text-base opacity-70">${await toHtml(child.comment?.summary)}</div>
          </div>
        `;
    }
  });
}

function Example({ doc, symbol }) {
  const obj = declaration(doc, symbol)?.comment;
  const content = obj?.blockTags.find((t) => t.tag === "@example")?.content;

  return content?.map((content) => {
    const lines = content?.text.split("\n");
    const code = lines?.slice(1, lines.length - 1).join("\n");
    return code;
  });
}

const doc = await parse({
  pkg: props.source,
  entry: "/src/index.ts",
  config: "/tsconfig.json",
});

const dec = declaration(doc, props.symbol);
const summary = await Summary({ doc, symbol: props.symbol });
const example = Example({ doc, symbol: props.symbol });
const attributes = await Attributes({ doc, symbol: props.symbol });
const events = Events({ doc, symbol: props.symbol });
const methods = await Methods({ doc, symbol: props.symbol });

const source = dec?.sources?.[0];
---

<script>
  import "@atrium-ui/elements/expandable";
</script>

<div class="typedoc pb-12 pt-10">
  <a target="_blank" href={sourceToUrl(props.source, source)}>
    <h2 class="font-mono pb-2">{props.symbol}</h2>
  </a>

  <div set:html={summary} />

  {
    example ? (
      <div>
        <h3 class="pt-8">Example</h3 >
        <hr/>
        <!-- <div class="not-content box">
          <Fragment set:html={example} />
        </div> -->
        {example.map(exp => {
          return <Code code={exp} lang="js" />;
        })}
      </div >
    ) : (
      ""
    )
  }

  {
    attributes ? (
      <>
        <h3 class="pt-8">Attributes</h3>
        <hr/>
        <table set:html={attributes} />
      </>
    ) : (
      ""
    )
  }

  {
    events ? (
      <>
        <h3 class="pt-8">Events</h3>
        <hr/>
        <table set:html={events} />
      </>
    ) : (
      ""
    )
  }

  {
    methods ? (
        <h3 class="pt-8">Methods</h3>
        <hr/>
        <a-expandable class="group">
            <button
                slot="toggle"
                type="button"
                class="items-center border border-zinc-800 rounded-md hover:bg-zinc-50 dark:hover:bg-zinc-800 p-2 px-4 cursor-pointer w-full bg-transparent text-left text-lg flex justify-between"
            >
                <span>Show</span>

                <span class="text-xl group-[&[opened]]:hidden">↴</span>
                <span class="text-xl hidden group-[&[opened]]:block">↶</span>
            </button>

            <div class="py-4 px-1">
                <div set:html={methods} />
            </div >
        </a-expandable>
    ) : (
      ""
    )
  }
</div>
